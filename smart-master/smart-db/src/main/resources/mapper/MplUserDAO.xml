<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.smart.db.dao.MplUserDAO">
    <resultMap id="BaseResultMap" type="com.smart.db.model.MplUser">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="username" jdbcType="VARCHAR" property="username"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="password1" jdbcType="VARCHAR" property="password1"/>
        <result column="password2" jdbcType="VARCHAR" property="password2"/>
        <result column="nick_name" jdbcType="VARCHAR" property="nickName"/>
        <result column="portrait" jdbcType="VARCHAR" property="portrait"/>
        <result column="email" jdbcType="VARCHAR" property="email"/>
        <result column="last_time" jdbcType="TIMESTAMP" property="lastTime"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="create_user" jdbcType="VARCHAR" property="createUser"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="update_user" jdbcType="VARCHAR" property="updateUser"/>
        <result column="remark" jdbcType="VARCHAR" property="remark"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, username, `password`, password1, password2, nick_name, portrait, email, last_time, 
    `status`, create_time, create_user, update_time, update_user, remark
  </sql>

    <sql id="Base_Column_List_Not_Password">
    id, username,  nick_name, portrait, email, last_time,
    `status`, create_time, create_user, update_time, update_user, remark
  </sql>

    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from mpl_user
        where id = #{id,jdbcType=BIGINT}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from mpl_user
    where id = #{id,jdbcType=BIGINT}
  </delete>
    <insert id="insert" parameterType="com.smart.db.model.MplUser">
    insert into mpl_user (id, username, `password`, 
      password1, password2, nick_name, 
      portrait, email, last_time, 
      `status`, create_time, create_user, 
      update_time, update_user, remark
      )
    values (#{id,jdbcType=BIGINT}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{password1,jdbcType=VARCHAR}, #{password2,jdbcType=VARCHAR}, #{nickName,jdbcType=VARCHAR}, 
      #{portrait,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{lastTime,jdbcType=TIMESTAMP}, 
      #{status,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{createUser,jdbcType=VARCHAR}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{updateUser,jdbcType=VARCHAR}, #{remark,jdbcType=VARCHAR}
      )
  </insert>
    <insert id="insertSelective" parameterType="com.smart.db.model.MplUser">
        insert into mpl_user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="username != null">
                username,
            </if>
            <if test="password != null">
                `password`,
            </if>
            <if test="password1 != null">
                password1,
            </if>
            <if test="password2 != null">
                password2,
            </if>
            <if test="nickName != null">
                nick_name,
            </if>
            <if test="portrait != null">
                portrait,
            </if>
            <if test="email != null">
                email,
            </if>
            <if test="lastTime != null">
                last_time,
            </if>
            <if test="status != null">
                `status`,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="createUser != null">
                create_user,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="updateUser != null">
                update_user,
            </if>
            <if test="remark != null">
                remark,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="username != null">
                #{username,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                #{password,jdbcType=VARCHAR},
            </if>
            <if test="password1 != null">
                #{password1,jdbcType=VARCHAR},
            </if>
            <if test="password2 != null">
                #{password2,jdbcType=VARCHAR},
            </if>
            <if test="nickName != null">
                #{nickName,jdbcType=VARCHAR},
            </if>
            <if test="portrait != null">
                #{portrait,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                #{email,jdbcType=VARCHAR},
            </if>
            <if test="lastTime != null">
                #{lastTime,jdbcType=TIMESTAMP},
            </if>
            <if test="status != null">
                #{status,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createUser != null">
                #{createUser,jdbcType=VARCHAR},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateUser != null">
                #{updateUser,jdbcType=VARCHAR},
            </if>
            <if test="remark != null">
                #{remark,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.smart.db.model.MplUser">
        update mpl_user
        <set>
            <if test="username != null">
                username = #{username,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                `password` = #{password,jdbcType=VARCHAR},
            </if>
            <if test="password1 != null">
                password1 = #{password1,jdbcType=VARCHAR},
            </if>
            <if test="password2 != null">
                password2 = #{password2,jdbcType=VARCHAR},
            </if>
            <if test="nickName != null">
                nick_name = #{nickName,jdbcType=VARCHAR},
            </if>
            <if test="portrait != null">
                portrait = #{portrait,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                email = #{email,jdbcType=VARCHAR},
            </if>
            <if test="lastTime != null">
                last_time = #{lastTime,jdbcType=TIMESTAMP},
            </if>
            <if test="status != null">
                `status` = #{status,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createUser != null">
                create_user = #{createUser,jdbcType=VARCHAR},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateUser != null">
                update_user = #{updateUser,jdbcType=VARCHAR},
            </if>
            <if test="remark != null">
                remark = #{remark,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.smart.db.model.MplUser">
    update mpl_user
    set username = #{username,jdbcType=VARCHAR},
      `password` = #{password,jdbcType=VARCHAR},
      password1 = #{password1,jdbcType=VARCHAR},
      password2 = #{password2,jdbcType=VARCHAR},
      nick_name = #{nickName,jdbcType=VARCHAR},
      portrait = #{portrait,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      last_time = #{lastTime,jdbcType=TIMESTAMP},
      `status` = #{status,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      create_user = #{createUser,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      update_user = #{updateUser,jdbcType=VARCHAR},
      remark = #{remark,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>


    <select id="selectByUserName" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from mpl_user where username=#{username}
    </select>

    <select id="findUserByName" resultType="java.lang.Integer">
       select count(1) from  mpl_user where username = #{username}
    </select>
    <select id="findUserByNamePwd" resultType="java.lang.Integer">
           select count(1) from  mpl_user where username = #{username} and  password = #{password}
    </select>

    <update id="updatePassword" parameterType="com.smart.db.model.MplUser">
     update  mpl_user set  password =#{password,jdbcType=VARCHAR},password1=#{password1,jdbcType=VARCHAR}
        where username = #{username,jdbcType=VARCHAR}
    </update>

    <update id="resetPassword">
       update mpl_user set password = #{password} where id = #{userId}
    </update>

    <select id="selectByRoId" resultType="java.lang.Integer">
        select count(1) from mpl_user_role where role_id in (
        <foreach collection="roleId" index="index" item="item" separator=",">
            #{item}
        </foreach>
        )
    </select>


    <select id="getUsersPage" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List_Not_Password"/>
        from mpl_user
        <if test="username!=null and username != ''">
            where username like concat('%',#{username},'%') AND username != 'root'
        </if>

        <if test="username==null or username == ''">
            where username != 'root'
        </if>


    </select>


    <select id="selectByUserId" resultType="java.lang.Integer">
        select count(1) from mpl_user
        where id in
        <foreach collection="userIds" index="index" item="item" separator=",">
            #{item}
        </foreach>
    </select>


    <update id="updateUserType">
        update set status = #{statusCode} from mpl_user where id in
        <foreach collection="userIds" index="index" item="item" separator=",">
            #{item}
        </foreach>
    </update>

</mapper>